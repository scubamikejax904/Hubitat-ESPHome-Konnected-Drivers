/**
 *  MIT License
 *  Copyright 2022 Jonathan Bradshaw (jb@nrgup.net)
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

//Modified to work with Hubitat 2.4.3.131 and Konnected Alarm Driver by ScubaMikeJax904 10-7-2025

groovy


metadata {
    definition(
        name: 'ESPHOME Contact Sensor',
        namespace: 'esphome',
        author: 'Jonathan Bradshaw',
        singleThreaded: true,
        importUrl: 'https://raw.githubusercontent.com/bradsjm/hubitat-drivers/main/ESPHome/ESPHome-ContactSensor.groovy') {

        capability 'Sensor'
        capability 'ContactSensor'
        capability 'Refresh'

        // Remove capabilities that are handled by parent
        // capability 'SignalStrength' - handled by parent
        // capability 'Initialize' - not needed for child device

        // Remove network status as it's handled by parent
        // attribute 'networkStatus', 'enum', [ 'connecting', 'online', 'offline' ]
    }

    preferences {
        // Remove all IP/connection preferences as child device communicates through parent
        input name: 'logEnable',
                type: 'bool',
                title: 'Enable Debug Logging',
                required: false,
                defaultValue: false

        input name: 'logTextEnable',
              type: 'bool',
              title: 'Enable descriptionText logging',
              required: false,
              defaultValue: true
    }
}

// Remove initialize() - child devices don't need to manage connections
public void initialize() {
    // Child device initialization handled by parent
    if (logEnable) {
        runIn(1800, 'logsOff')
    }
}

public void installed() {
    log.info "${device} child device installed"
}

public void logsOff() {
    device.updateSetting('logEnable', false)
    log.info "${device} debug logging disabled"
}

public void refresh() {
    // Child device refresh - delegate to parent
    log.info "${device} refresh requested"
    parent?.componentRefresh(device)
}

public void updated() {
    log.info "${device} driver configuration updated"
    initialize()
}

public void uninstalled() {
    log.info "${device} child device uninstalled"
}

// Simplified parse method for child device
// The parent will call this with processed events
public void parse(List<Map> events) {
    if (logEnable) { log.debug "Child device received events: ${events}" }
    
    events.each { event ->
        if (event.name == 'contact') {
            if (device.currentValue('contact') != event.value) {
                if (logTextEnable) { 
                    log.info "${device} ${event.descriptionText ?: "contact is ${event.value}"}"
                }
                sendEvent(event)
            }
        }
    }
}

// Helper method for parent to send events directly
public void sendChildEvent(Map event) {
    if (logEnable) { log.debug "Child device received event: ${event}" }
    
    if (event.name == 'contact') {
        if (device.currentValue('contact') != event.value) {
            if (logTextEnable) { 
                log.info "${device} ${event.descriptionText ?: "contact is ${event.value}"}"
            }
            sendEvent(event)
        }
    }
}
